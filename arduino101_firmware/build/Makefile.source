#
# Copyright (c) 2016, Intel Corporation
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

# =============================================================================
# Generate sources in the specified source directory
# Usage:
# 	make -f Makefile.source SRC=<SRC>          \
# 	                        OUT=<OUT>          \
# 	                        KCONFIG=<KCONFIG>
# Where:
#  <SRC>        is the directory you want to generate source, either absolute
#               or relative from the tree top
#  <OUT>        is the path to the out-of-tree build directory
#  <KCONFIG>    is the path to the Kconfig file (name included)
# =============================================================================

# This is the default target, that will eventually trigger everything
all:
	$(AT)true

ifndef SRC
$(error No source directory (SRC) specified)
endif

ifndef OUT
$(error No output directory (OUT) specified)
endif

ifndef KCONFIG
$(error No Kconfig file (KCONFIG) specified)
endif

# =============================================================================
# Step 1: Load build configuration
#
# The build configuration for this specific directory is contained in:
# - the global configuration file generated by Kconfig
# - the specific Kbuild.mk file defining rules for this directory
# =============================================================================

# Read Kconfig's configuration file
include $(KCONFIG)

# Concatenate OUT and SRC without the absolute path to the project
OUT_SRC := $(abspath $(OUT)/$(SRC:$(T)/%=%))

# Include rules to generate sources in this directory, if any
-include $(SRC)/Kbuild.mk

# =============================================================================
# Step 2: Separate sources from directories
# =============================================================================

# Then, identify and isolate directories listed inside src-y
__subdir-y	:= $(patsubst %/,%,$(filter %/, $(src-y)))
subdir-y	+= $(__subdir-y)
subdir-y	:= $(sort $(subdir-y))

# Next, remove directories from the list of files to generate
src-y		:= $(patsubst %/,, $(src-y))
# Then, remove possible absolute project path prefix
src-y		:= $(src-y:$(CURDIR)/%=%)

# Prepend subdirs (absolute dirs are omitted) with the absolute SRC path
subdir-y := $(filter /%,$(subdir-y)) \
            $(addprefix $(SRC)/,$(filter-out /%,$(subdir-y)))

# Prepend the generated sources with the actual output directory
src-y		:= $(addprefix $(OUT_SRC)/,$(src-y))

ifneq ($(VERBOSE),)
$(info Arduino101_Firmware kbuild processed: pwd=$(CURDIR) src=$(SRC) out=$(OUT:$(T)/%/kbuild=%))
$(info -   subdirs-y: $(subdir-y))
$(info -   src-y: $(src-y))
endif

# =============================================================================
# Step 3: Define rules to descend into subdirectories
# =============================================================================

# Create directory
$(OUT_SRC):
	@echo $(ANSI_RED)"[kMD]"$(ANSI_OFF) $(@:$(T)/%=%)
	$(AT)mkdir -p $@

$(subdir-y): | $(OUT_SRC)
	@[ "$(VERBOSE)" ] && echo "Descending into directory $@" || true
	$(AT)$(MAKE) -f build/Makefile.source \
		SRC=$@ \
		OUT=$(OUT) \
		KCONFIG=$(KCONFIG)

# =============================================================================
# Step 4: Generate sources
# =============================================================================

# Output directory
$(OUT_SRC):
	@echo $(ANSI_RED)"[kMD]"$(ANSI_OFF) $(@:$(T)/%=%)
	$(AT)mkdir -p $@

# Generated sources and subdirectories
# Note:
# The actual rules to generate targets listed in src-y must be defined in the
# local Kbuild.mk
all: $(src-y) $(subdir-y) | $(OUT_SRC)

.PHONY: $(subdir-y)
