
/* **** DO NOT EDIT - this file is generated by ARChitect2 ****
 *
 * Description: Header file declaring the compiler extensions for eia components 
 */

#ifndef _eiaextensions_H_
#define _eiaextensions_H_

#ifndef __GNUC__

// User extension aux register - dsp_mac
#define AR_DSP_MAC_MSBOUT 0x80000000
#pragma aux_register(AR_DSP_MAC_MSBOUT, name => "ar_dsp_mac_msbout")
#define AR_DSP_MAC_LSBOUT 0x80000001
#pragma aux_register(AR_DSP_MAC_LSBOUT, name => "ar_dsp_mac_lsbout")

// User extension instruction - dmulh11
extern long dmulh11(long, long);
#pragma intrinsic(dmulh11, opcode => 0x06, sub_opcode => 0x08 , blocking_cycles => 7)

// User extension instruction - dmulh11_f
extern long dmulh11_f(long, long);
#pragma intrinsic(dmulh11_f, opcode => 0x06, sub_opcode => 0x08, set_flags => 1, flags => "zncv" , blocking_cycles => 7)

// User extension instruction - fmul
extern long fmul(long, long);
#pragma intrinsic(fmul, opcode => 0x06, sub_opcode => 0x00 , latency_cycles => 3)

// User extension instruction - fmul_f
extern long fmul_f(long, long);
#pragma intrinsic(fmul_f, opcode => 0x06, sub_opcode => 0x00, set_flags => 1, flags => "zncv" , latency_cycles => 3)

// User extension instruction - alg2
extern long alg2(long);
#pragma intrinsic(alg2, opcode => 0x07, sub_opcode => 0x20 )

// User extension instruction - alg2_f
extern long alg2_f(long);
#pragma intrinsic(alg2_f, opcode => 0x07, sub_opcode => 0x20, set_flags => 1, flags => "zncv" )

// User extension instruction - mulcc
extern long mulcc(long, long);
#pragma intrinsic(mulcc, opcode => 0x07, sub_opcode => 0x00 , latency_cycles => 2)

// User extension instruction - mulcc_f
extern long mulcc_f(long, long);
#pragma intrinsic(mulcc_f, opcode => 0x07, sub_opcode => 0x00, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - dsp_abs_1d
extern long dsp_abs_1d(long);
#pragma intrinsic(dsp_abs_1d, opcode => 0x07, sub_opcode => 0x00 )

// User extension instruction - dsp_add_1d
extern long dsp_add_1d(long, long);
#pragma intrinsic(dsp_add_1d, opcode => 0x07, sub_opcode => 0x03 )

// User extension instruction - dsp_fp_cmp
extern long dsp_fp_cmp(long, long);
#pragma intrinsic(dsp_fp_cmp, opcode => 0x07, sub_opcode => 0x2b )

// User extension instruction - dsp_fp_cmp_f
extern long dsp_fp_cmp_f(long, long);
#pragma intrinsic(dsp_fp_cmp_f, opcode => 0x07, sub_opcode => 0x2b, set_flags => 1, flags => "zncv" )

// User extension instruction - dsp_fp_div
extern long dsp_fp_div(long, long);
#pragma intrinsic(dsp_fp_div, opcode => 0x07, sub_opcode => 0x2a , blocking_cycles => 2)

// User extension instruction - dsp_fp_flt2i
extern long dsp_fp_flt2i(long);
#pragma intrinsic(dsp_fp_flt2i, opcode => 0x07, sub_opcode => 0x2b )

// User extension instruction - dsp_fp_i2flt
extern long dsp_fp_i2flt(long);
#pragma intrinsic(dsp_fp_i2flt, opcode => 0x07, sub_opcode => 0x2c )

// User extension instruction - dsp_fp_sqrt
extern long dsp_fp_sqrt(long);
#pragma intrinsic(dsp_fp_sqrt, opcode => 0x07, sub_opcode => 0x2d , blocking_cycles => 3)

// User extension instruction - dsp_mac
extern long dsp_mac(long, long);
#pragma intrinsic(dsp_mac, opcode => 0x07, sub_opcode => 0x1B , effects => "ar_dsp_mac_msbout:is_read;ar_dsp_mac_lsbout:is_read;ar_dsp_mac_msbout:is_written;ar_dsp_mac_lsbout:is_written")

// User extension instruction - dsp_negate_1d
extern long dsp_negate_1d(long);
#pragma intrinsic(dsp_negate_1d, opcode => 0x07, sub_opcode => 0x0F )

// User extension instruction - dsp_shift_1d
extern long dsp_shift_1d(long, long);
#pragma intrinsic(dsp_shift_1d, opcode => 0x07, sub_opcode => 0x18 )

// User extension instruction - dsp_cos
extern long dsp_cos(long);
#pragma intrinsic(dsp_cos, opcode => 0x07, sub_opcode => 0x1E , blocking_cycles => 7)

// User extension instruction - dsp_sub_1d
extern long dsp_sub_1d(long, long);
#pragma intrinsic(dsp_sub_1d, opcode => 0x07, sub_opcode => 0x06 )

// User extension instruction - lg2
extern long lg2(long);
#pragma intrinsic(lg2, opcode => 0x07, sub_opcode => 0x21 )

// User extension instruction - lg2_f
extern long lg2_f(long);
#pragma intrinsic(lg2_f, opcode => 0x07, sub_opcode => 0x21, set_flags => 1, flags => "zncv" )

// User extension instruction - mpy16x16_ll
extern long mpy16x16_ll(long, long);
#pragma intrinsic(mpy16x16_ll, opcode => 0x07, sub_opcode => 0x3e , latency_cycles => 2)

// User extension instruction - mpy16x16_ll_f
extern long mpy16x16_ll_f(long, long);
#pragma intrinsic(mpy16x16_ll_f, opcode => 0x07, sub_opcode => 0x3e, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - scgexpj
extern long scgexpj(long, long);
#pragma intrinsic(scgexpj, opcode => 0x07, sub_opcode => 0x10 , latency_cycles => 2)

// User extension instruction - dmulh12
extern long dmulh12(long, long);
#pragma intrinsic(dmulh12, opcode => 0x06, sub_opcode => 0x09 , blocking_cycles => 7)

// User extension instruction - dmulh12_f
extern long dmulh12_f(long, long);
#pragma intrinsic(dmulh12_f, opcode => 0x06, sub_opcode => 0x09, set_flags => 1, flags => "zncv" , blocking_cycles => 7)

// User extension instruction - fadd
extern long fadd(long, long);
#pragma intrinsic(fadd, opcode => 0x06, sub_opcode => 0x01 , latency_cycles => 3)

// User extension instruction - fadd_f
extern long fadd_f(long, long);
#pragma intrinsic(fadd_f, opcode => 0x06, sub_opcode => 0x01, set_flags => 1, flags => "zncv" , latency_cycles => 3)

// User extension instruction - mulrcc
extern long mulrcc(long, long);
#pragma intrinsic(mulrcc, opcode => 0x07, sub_opcode => 0x01 , latency_cycles => 2)

// User extension instruction - mulrcc_f
extern long mulrcc_f(long, long);
#pragma intrinsic(mulrcc_f, opcode => 0x07, sub_opcode => 0x01, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - dsp_abs_2d
extern long dsp_abs_2d(long);
#pragma intrinsic(dsp_abs_2d, opcode => 0x07, sub_opcode => 0x01 )

// User extension instruction - dsp_add_2d
extern long dsp_add_2d(long, long);
#pragma intrinsic(dsp_add_2d, opcode => 0x07, sub_opcode => 0x04 )

// User extension instruction - dsp_mult
extern long dsp_mult(long, long);
#pragma intrinsic(dsp_mult, opcode => 0x07, sub_opcode => 0x1C , effects => "ar_dsp_mac_msbout:is_written;ar_dsp_mac_lsbout:is_written")

// User extension instruction - dsp_negate_2d
extern long dsp_negate_2d(long);
#pragma intrinsic(dsp_negate_2d, opcode => 0x07, sub_opcode => 0x10 )

// User extension instruction - dsp_shift_2d
extern long dsp_shift_2d(long, long);
#pragma intrinsic(dsp_shift_2d, opcode => 0x07, sub_opcode => 0x19 )

// User extension instruction - dsp_sin
extern long dsp_sin(long);
#pragma intrinsic(dsp_sin, opcode => 0x07, sub_opcode => 0x1F , blocking_cycles => 7)

// User extension instruction - dsp_sub_2d
extern long dsp_sub_2d(long, long);
#pragma intrinsic(dsp_sub_2d, opcode => 0x07, sub_opcode => 0x07 )

// User extension instruction - mac16x16_ll
extern long mac16x16_ll(long, long);
#pragma intrinsic(mac16x16_ll, opcode => 0x07, sub_opcode => 0x37 , latency_cycles => 2)

// User extension instruction - mac16x16_ll_f
extern long mac16x16_ll_f(long, long);
#pragma intrinsic(mac16x16_ll_f, opcode => 0x07, sub_opcode => 0x37, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - scgexpnj
extern long scgexpnj(long, long);
#pragma intrinsic(scgexpnj, opcode => 0x07, sub_opcode => 0x11 , latency_cycles => 2)

// User extension instruction - dsubh21
extern long dsubh21(long, long);
#pragma intrinsic(dsubh21, opcode => 0x06, sub_opcode => 0x12 , blocking_cycles => 5)

// User extension instruction - dsubh21_f
extern long dsubh21_f(long, long);
#pragma intrinsic(dsubh21_f, opcode => 0x06, sub_opcode => 0x12, set_flags => 1, flags => "zncv" , blocking_cycles => 5)

// User extension instruction - fsub
extern long fsub(long, long);
#pragma intrinsic(fsub, opcode => 0x06, sub_opcode => 0x02 , latency_cycles => 3)

// User extension instruction - fsub_f
extern long fsub_f(long, long);
#pragma intrinsic(fsub_f, opcode => 0x06, sub_opcode => 0x02, set_flags => 1, flags => "zncv" , latency_cycles => 3)

// User extension instruction - macdwe
extern long macdwe(long, long);
#pragma intrinsic(macdwe, opcode => 0x07, sub_opcode => 0x16 , latency_cycles => 2)

// User extension instruction - macdwe_f
extern long macdwe_f(long, long);
#pragma intrinsic(macdwe_f, opcode => 0x07, sub_opcode => 0x16, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - dsp_abs_4d
extern long dsp_abs_4d(long);
#pragma intrinsic(dsp_abs_4d, opcode => 0x07, sub_opcode => 0x02 )

// User extension instruction - dsp_add_4d
extern long dsp_add_4d(long, long);
#pragma intrinsic(dsp_add_4d, opcode => 0x07, sub_opcode => 0x05 )

// User extension instruction - dsp_negate_4d
extern long dsp_negate_4d(long);
#pragma intrinsic(dsp_negate_4d, opcode => 0x07, sub_opcode => 0x11 )

// User extension instruction - dsp_shift_4d
extern long dsp_shift_4d(long, long);
#pragma intrinsic(dsp_shift_4d, opcode => 0x07, sub_opcode => 0x1A )

// User extension instruction - dsp_sub_4d
extern long dsp_sub_4d(long, long);
#pragma intrinsic(dsp_sub_4d, opcode => 0x07, sub_opcode => 0x08 )

// User extension instruction - mac32x16_fl
extern long mac32x16_fl(long, long);
#pragma intrinsic(mac32x16_fl, opcode => 0x07, sub_opcode => 0x39 , latency_cycles => 2)

// User extension instruction - mac32x16_fl_f
extern long mac32x16_fl_f(long, long);
#pragma intrinsic(mac32x16_fl_f, opcode => 0x07, sub_opcode => 0x39, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - scgsin
extern long scgsin(long, long);
#pragma intrinsic(scgsin, opcode => 0x07, sub_opcode => 0x12 , latency_cycles => 2)

// User extension instruction - dsubh22
extern long dsubh22(long, long);
#pragma intrinsic(dsubh22, opcode => 0x06, sub_opcode => 0x13 , blocking_cycles => 5)

// User extension instruction - dsubh22_f
extern long dsubh22_f(long, long);
#pragma intrinsic(dsubh22_f, opcode => 0x06, sub_opcode => 0x13, set_flags => 1, flags => "zncv" , blocking_cycles => 5)

// User extension instruction - macrdwe
extern long macrdwe(long, long);
#pragma intrinsic(macrdwe, opcode => 0x07, sub_opcode => 0x17 , latency_cycles => 2)

// User extension instruction - macrdwe_f
extern long macrdwe_f(long, long);
#pragma intrinsic(macrdwe_f, opcode => 0x07, sub_opcode => 0x17, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - msub32x16_fl
extern long msub32x16_fl(long, long);
#pragma intrinsic(msub32x16_fl, opcode => 0x07, sub_opcode => 0x3a , latency_cycles => 2)

// User extension instruction - msub32x16_fl_f
extern long msub32x16_fl_f(long, long);
#pragma intrinsic(msub32x16_fl_f, opcode => 0x07, sub_opcode => 0x3a, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - scgcos
extern long scgcos(long, long);
#pragma intrinsic(scgcos, opcode => 0x07, sub_opcode => 0x13 , latency_cycles => 2)

// User extension instruction - drsubh11
extern long drsubh11(long, long);
#pragma intrinsic(drsubh11, opcode => 0x06, sub_opcode => 0x14 , blocking_cycles => 5)

// User extension instruction - drsubh11_f
extern long drsubh11_f(long, long);
#pragma intrinsic(drsubh11_f, opcode => 0x06, sub_opcode => 0x14, set_flags => 1, flags => "zncv" , blocking_cycles => 5)

// User extension instruction - mulcj
extern long mulcj(long, long);
#pragma intrinsic(mulcj, opcode => 0x07, sub_opcode => 0x02 , latency_cycles => 2)

// User extension instruction - mulcj_f
extern long mulcj_f(long, long);
#pragma intrinsic(mulcj_f, opcode => 0x07, sub_opcode => 0x02, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - mpy32x16_fh
extern long mpy32x16_fh(long, long);
#pragma intrinsic(mpy32x16_fh, opcode => 0x07, sub_opcode => 0x34 , latency_cycles => 2)

// User extension instruction - mpy32x16_fh_f
extern long mpy32x16_fh_f(long, long);
#pragma intrinsic(mpy32x16_fh_f, opcode => 0x07, sub_opcode => 0x34, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - scgexpjrst 
extern void scgexpjrst();
#pragma intrinsic(scgexpjrst, opcode => 0x07, sub_opcode => 0x1c, assume_volatile => 1)

// User extension instruction - drsubh12
extern long drsubh12(long, long);
#pragma intrinsic(drsubh12, opcode => 0x06, sub_opcode => 0x15 , blocking_cycles => 5)

// User extension instruction - drsubh12_f
extern long drsubh12_f(long, long);
#pragma intrinsic(drsubh12_f, opcode => 0x06, sub_opcode => 0x15, set_flags => 1, flags => "zncv" , blocking_cycles => 5)

// User extension instruction - muldwz
extern long muldwz(long, long);
#pragma intrinsic(muldwz, opcode => 0x07, sub_opcode => 0x25 , latency_cycles => 2)

// User extension instruction - muldwz_f
extern long muldwz_f(long, long);
#pragma intrinsic(muldwz_f, opcode => 0x07, sub_opcode => 0x25, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - mac32x16_fh
extern long mac32x16_fh(long, long);
#pragma intrinsic(mac32x16_fh, opcode => 0x07, sub_opcode => 0x3c , latency_cycles => 2)

// User extension instruction - mac32x16_fh_f
extern long mac32x16_fh_f(long, long);
#pragma intrinsic(mac32x16_fh_f, opcode => 0x07, sub_opcode => 0x3c, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - drsubh21
extern long drsubh21(long, long);
#pragma intrinsic(drsubh21, opcode => 0x06, sub_opcode => 0x16 , blocking_cycles => 5)

// User extension instruction - drsubh21_f
extern long drsubh21_f(long, long);
#pragma intrinsic(drsubh21_f, opcode => 0x06, sub_opcode => 0x16, set_flags => 1, flags => "zncv" , blocking_cycles => 5)

// User extension instruction - mulrdwz
extern long mulrdwz(long, long);
#pragma intrinsic(mulrdwz, opcode => 0x07, sub_opcode => 0x26 , latency_cycles => 2)

// User extension instruction - mulrdwz_f
extern long mulrdwz_f(long, long);
#pragma intrinsic(mulrdwz_f, opcode => 0x07, sub_opcode => 0x26, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - msub32x16_fh
extern long msub32x16_fh(long, long);
#pragma intrinsic(msub32x16_fh, opcode => 0x07, sub_opcode => 0x3d , latency_cycles => 2)

// User extension instruction - msub32x16_fh_f
extern long msub32x16_fh_f(long, long);
#pragma intrinsic(msub32x16_fh_f, opcode => 0x07, sub_opcode => 0x3d, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - drsubh22
extern long drsubh22(long, long);
#pragma intrinsic(drsubh22, opcode => 0x06, sub_opcode => 0x17 , blocking_cycles => 5)

// User extension instruction - drsubh22_f
extern long drsubh22_f(long, long);
#pragma intrinsic(drsubh22_f, opcode => 0x06, sub_opcode => 0x17, set_flags => 1, flags => "zncv" , blocking_cycles => 5)

// User extension instruction - macdwz
extern long macdwz(long, long);
#pragma intrinsic(macdwz, opcode => 0x07, sub_opcode => 0x28 , latency_cycles => 2)

// User extension instruction - macdwz_f
extern long macdwz_f(long, long);
#pragma intrinsic(macdwz_f, opcode => 0x07, sub_opcode => 0x28, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - msub16x16_ll
extern long msub16x16_ll(long, long);
#pragma intrinsic(msub16x16_ll, opcode => 0x07, sub_opcode => 0x3b , latency_cycles => 2)

// User extension instruction - msub16x16_ll_f
extern long msub16x16_ll_f(long, long);
#pragma intrinsic(msub16x16_ll_f, opcode => 0x07, sub_opcode => 0x3b, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - dexcl1
extern long dexcl1(long, long);
#pragma intrinsic(dexcl1, opcode => 0x06, sub_opcode => 0x18 )

// User extension instruction - dexcl1_f
extern long dexcl1_f(long, long);
#pragma intrinsic(dexcl1_f, opcode => 0x06, sub_opcode => 0x18, set_flags => 1, flags => "zncv" )

// User extension instruction - macrdwz
extern long macrdwz(long, long);
#pragma intrinsic(macrdwz, opcode => 0x07, sub_opcode => 0x29 , latency_cycles => 2)

// User extension instruction - macrdwz_f
extern long macrdwz_f(long, long);
#pragma intrinsic(macrdwz_f, opcode => 0x07, sub_opcode => 0x29, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - mpy16x16_hl
extern long mpy16x16_hl(long, long);
#pragma intrinsic(mpy16x16_hl, opcode => 0x07, sub_opcode => 0x31 , latency_cycles => 2)

// User extension instruction - mpy16x16_hl_f
extern long mpy16x16_hl_f(long, long);
#pragma intrinsic(mpy16x16_hl_f, opcode => 0x07, sub_opcode => 0x31, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - dexcl2
extern long dexcl2(long, long);
#pragma intrinsic(dexcl2, opcode => 0x06, sub_opcode => 0x19 )

// User extension instruction - dexcl2_f
extern long dexcl2_f(long, long);
#pragma intrinsic(dexcl2_f, opcode => 0x06, sub_opcode => 0x19, set_flags => 1, flags => "zncv" )

// User extension instruction - mulrcj
extern long mulrcj(long, long);
#pragma intrinsic(mulrcj, opcode => 0x07, sub_opcode => 0x20 , latency_cycles => 2)

// User extension instruction - mulrcj_f
extern long mulrcj_f(long, long);
#pragma intrinsic(mulrcj_f, opcode => 0x07, sub_opcode => 0x20, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - mac16x16_hl
extern long mac16x16_hl(long, long);
#pragma intrinsic(mac16x16_hl, opcode => 0x07, sub_opcode => 0x32 , latency_cycles => 2)

// User extension instruction - mac16x16_hl_f
extern long mac16x16_hl_f(long, long);
#pragma intrinsic(mac16x16_hl_f, opcode => 0x07, sub_opcode => 0x32, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - dmulh21
extern long dmulh21(long, long);
#pragma intrinsic(dmulh21, opcode => 0x06, sub_opcode => 0x0a , blocking_cycles => 7)

// User extension instruction - dmulh21_f
extern long dmulh21_f(long, long);
#pragma intrinsic(dmulh21_f, opcode => 0x06, sub_opcode => 0x0a, set_flags => 1, flags => "zncv" , blocking_cycles => 7)

// User extension instruction - mulr2w
extern long mulr2w(long, long);
#pragma intrinsic(mulr2w, opcode => 0x07, sub_opcode => 0x22 , latency_cycles => 2)

// User extension instruction - mulr2w_f
extern long mulr2w_f(long, long);
#pragma intrinsic(mulr2w_f, opcode => 0x07, sub_opcode => 0x22, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - msub16x16_hl
extern long msub16x16_hl(long, long);
#pragma intrinsic(msub16x16_hl, opcode => 0x07, sub_opcode => 0x35 , latency_cycles => 2)

// User extension instruction - msub16x16_hl_f
extern long msub16x16_hl_f(long, long);
#pragma intrinsic(msub16x16_hl_f, opcode => 0x07, sub_opcode => 0x35, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - dmulh22
extern long dmulh22(long, long);
#pragma intrinsic(dmulh22, opcode => 0x06, sub_opcode => 0x0b , blocking_cycles => 7)

// User extension instruction - dmulh22_f
extern long dmulh22_f(long, long);
#pragma intrinsic(dmulh22_f, opcode => 0x06, sub_opcode => 0x0b, set_flags => 1, flags => "zncv" , blocking_cycles => 7)

// User extension instruction - mul2w
extern long mul2w(long, long);
#pragma intrinsic(mul2w, opcode => 0x07, sub_opcode => 0x21 , latency_cycles => 2)

// User extension instruction - mul2w_f
extern long mul2w_f(long, long);
#pragma intrinsic(mul2w_f, opcode => 0x07, sub_opcode => 0x21, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - mpy16x16_hh
extern long mpy16x16_hh(long, long);
#pragma intrinsic(mpy16x16_hh, opcode => 0x07, sub_opcode => 0x30 , latency_cycles => 2)

// User extension instruction - mpy16x16_hh_f
extern long mpy16x16_hh_f(long, long);
#pragma intrinsic(mpy16x16_hh_f, opcode => 0x07, sub_opcode => 0x30, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - daddh11
extern long daddh11(long, long);
#pragma intrinsic(daddh11, opcode => 0x06, sub_opcode => 0x0c , blocking_cycles => 5)

// User extension instruction - daddh11_f
extern long daddh11_f(long, long);
#pragma intrinsic(daddh11_f, opcode => 0x06, sub_opcode => 0x0c, set_flags => 1, flags => "zncv" , blocking_cycles => 5)

// User extension instruction - maccj
extern long maccj(long, long);
#pragma intrinsic(maccj, opcode => 0x07, sub_opcode => 0x0a , latency_cycles => 2)

// User extension instruction - maccj_f
extern long maccj_f(long, long);
#pragma intrinsic(maccj_f, opcode => 0x07, sub_opcode => 0x0a, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - mac16x16_hh
extern long mac16x16_hh(long, long);
#pragma intrinsic(mac16x16_hh, opcode => 0x07, sub_opcode => 0x36 , latency_cycles => 2)

// User extension instruction - mac16x16_hh_f
extern long mac16x16_hh_f(long, long);
#pragma intrinsic(mac16x16_hh_f, opcode => 0x07, sub_opcode => 0x36, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - daddh12
extern long daddh12(long, long);
#pragma intrinsic(daddh12, opcode => 0x06, sub_opcode => 0x0d , blocking_cycles => 5)

// User extension instruction - daddh12_f
extern long daddh12_f(long, long);
#pragma intrinsic(daddh12_f, opcode => 0x06, sub_opcode => 0x0d, set_flags => 1, flags => "zncv" , blocking_cycles => 5)

// User extension instruction - muldwo
extern long muldwo(long, long);
#pragma intrinsic(muldwo, opcode => 0x07, sub_opcode => 0x23 , latency_cycles => 2)

// User extension instruction - muldwo_f
extern long muldwo_f(long, long);
#pragma intrinsic(muldwo_f, opcode => 0x07, sub_opcode => 0x23, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - msub16x16_hh
extern long msub16x16_hh(long, long);
#pragma intrinsic(msub16x16_hh, opcode => 0x07, sub_opcode => 0x38 , latency_cycles => 2)

// User extension instruction - msub16x16_hh_f
extern long msub16x16_hh_f(long, long);
#pragma intrinsic(msub16x16_hh_f, opcode => 0x07, sub_opcode => 0x38, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - daddh21
extern long daddh21(long, long);
#pragma intrinsic(daddh21, opcode => 0x06, sub_opcode => 0x0e , blocking_cycles => 5)

// User extension instruction - daddh21_f
extern long daddh21_f(long, long);
#pragma intrinsic(daddh21_f, opcode => 0x06, sub_opcode => 0x0e, set_flags => 1, flags => "zncv" , blocking_cycles => 5)

// User extension instruction - mulrdwo
extern long mulrdwo(long, long);
#pragma intrinsic(mulrdwo, opcode => 0x07, sub_opcode => 0x27 , latency_cycles => 2)

// User extension instruction - mulrdwo_f
extern long mulrdwo_f(long, long);
#pragma intrinsic(mulrdwo_f, opcode => 0x07, sub_opcode => 0x27, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - mpy32x16_fl
extern long mpy32x16_fl(long, long);
#pragma intrinsic(mpy32x16_fl, opcode => 0x07, sub_opcode => 0x33 , latency_cycles => 2)

// User extension instruction - mpy32x16_fl_f
extern long mpy32x16_fl_f(long, long);
#pragma intrinsic(mpy32x16_fl_f, opcode => 0x07, sub_opcode => 0x33, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - daddh22
extern long daddh22(long, long);
#pragma intrinsic(daddh22, opcode => 0x06, sub_opcode => 0x0f , blocking_cycles => 5)

// User extension instruction - daddh22_f
extern long daddh22_f(long, long);
#pragma intrinsic(daddh22_f, opcode => 0x06, sub_opcode => 0x0f, set_flags => 1, flags => "zncv" , blocking_cycles => 5)

// User extension instruction - maccc
extern long maccc(long, long);
#pragma intrinsic(maccc, opcode => 0x07, sub_opcode => 0x24 , latency_cycles => 2)

// User extension instruction - maccc_f
extern long maccc_f(long, long);
#pragma intrinsic(maccc_f, opcode => 0x07, sub_opcode => 0x24, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - dsubh11
extern long dsubh11(long, long);
#pragma intrinsic(dsubh11, opcode => 0x06, sub_opcode => 0x10 , blocking_cycles => 5)

// User extension instruction - dsubh11_f
extern long dsubh11_f(long, long);
#pragma intrinsic(dsubh11_f, opcode => 0x06, sub_opcode => 0x10, set_flags => 1, flags => "zncv" , blocking_cycles => 5)

// User extension instruction - macrcc
extern long macrcc(long, long);
#pragma intrinsic(macrcc, opcode => 0x07, sub_opcode => 0x09 , latency_cycles => 2)

// User extension instruction - macrcc_f
extern long macrcc_f(long, long);
#pragma intrinsic(macrcc_f, opcode => 0x07, sub_opcode => 0x09, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - dsubh12
extern long dsubh12(long, long);
#pragma intrinsic(dsubh12, opcode => 0x06, sub_opcode => 0x11 , blocking_cycles => 5)

// User extension instruction - dsubh12_f
extern long dsubh12_f(long, long);
#pragma intrinsic(dsubh12_f, opcode => 0x06, sub_opcode => 0x11, set_flags => 1, flags => "zncv" , blocking_cycles => 5)

// User extension instruction - macrcj
extern long macrcj(long, long);
#pragma intrinsic(macrcj, opcode => 0x07, sub_opcode => 0x0b , latency_cycles => 2)

// User extension instruction - macrcj_f
extern long macrcj_f(long, long);
#pragma intrinsic(macrcj_f, opcode => 0x07, sub_opcode => 0x0b, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - mac2w
extern long mac2w(long, long);
#pragma intrinsic(mac2w, opcode => 0x07, sub_opcode => 0x0c , latency_cycles => 2)

// User extension instruction - mac2w_f
extern long mac2w_f(long, long);
#pragma intrinsic(mac2w_f, opcode => 0x07, sub_opcode => 0x0c, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - macr2w
extern long macr2w(long, long);
#pragma intrinsic(macr2w, opcode => 0x07, sub_opcode => 0x0d , latency_cycles => 2)

// User extension instruction - macr2w_f
extern long macr2w_f(long, long);
#pragma intrinsic(macr2w_f, opcode => 0x07, sub_opcode => 0x0d, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - macdwo
extern long macdwo(long, long);
#pragma intrinsic(macdwo, opcode => 0x07, sub_opcode => 0x0e , latency_cycles => 2)

// User extension instruction - macdwo_f
extern long macdwo_f(long, long);
#pragma intrinsic(macdwo_f, opcode => 0x07, sub_opcode => 0x0e, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - macrdwo
extern long macrdwo(long, long);
#pragma intrinsic(macrdwo, opcode => 0x07, sub_opcode => 0x0f , latency_cycles => 2)

// User extension instruction - macrdwo_f
extern long macrdwo_f(long, long);
#pragma intrinsic(macrdwo_f, opcode => 0x07, sub_opcode => 0x0f, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - muldwe
extern long muldwe(long, long);
#pragma intrinsic(muldwe, opcode => 0x07, sub_opcode => 0x14 , latency_cycles => 2)

// User extension instruction - muldwe_f
extern long muldwe_f(long, long);
#pragma intrinsic(muldwe_f, opcode => 0x07, sub_opcode => 0x14, set_flags => 1, flags => "zncv" , latency_cycles => 2)

// User extension instruction - mulrdwe
extern long mulrdwe(long, long);
#pragma intrinsic(mulrdwe, opcode => 0x07, sub_opcode => 0x15 , latency_cycles => 2)

// User extension instruction - mulrdwe_f
extern long mulrdwe_f(long, long);
#pragma intrinsic(mulrdwe_f, opcode => 0x07, sub_opcode => 0x15, set_flags => 1, flags => "zncv" , latency_cycles => 2)
#endif

// User extension aux register - dpfp_build
#define AR_DPFP_BUILD 0x6c

// User extension aux register - fp_build
#define AR_FP_BUILD 0x6b

// User extension aux register - aux_cmac_accum0
#define AR_AUX_CMAC_ACCUM0 0xB0

// User extension aux register - dsp_fp_cmp_min
#define AR_DSP_FP_CMP_MIN 0xBE

// User extension aux register - dsp_mac_msbout
#define AR_DSP_MAC_MSBOUT 0x80000000

// User extension aux register - io_adc0_set
#define AR_IO_ADC0_SET 0x80015000

// User extension aux register - io_creg_mst0_ctrl
#define AR_IO_CREG_MST0_CTRL 0x80018000

// User extension aux register - io_creg_slv0_obsr
#define AR_IO_CREG_SLV0_OBSR 0x80018080

// User extension aux register - io_creg_slv1_obsr
#define AR_IO_CREG_SLV1_OBSR 0x80018180

// User extension aux register - io_gpio_8b0_swporta_dr
#define AR_IO_GPIO_8B0_SWPORTA_DR 0x80017800

// User extension aux register - io_gpio_8b1_swporta_dr
#define AR_IO_GPIO_8B1_SWPORTA_DR 0x80017900

// User extension aux register - io_i2c_mst0_con
#define AR_IO_I2C_MST0_CON 0x80012000

// User extension aux register - io_i2c_mst1_con
#define AR_IO_I2C_MST1_CON 0x80012100

// User extension aux register - mul32x16_accum_l
#define AR_MUL32X16_ACCUM_L 0x110

// User extension aux register - aux_scgen_acc1
#define AR_AUX_SCGEN_ACC1 0xd9

// User extension aux register - aux_dpfp1l
#define AR_AUX_DPFP1L 0x301

// User extension aux register - fp_status
#define AR_FP_STATUS 0x300

// User extension aux register - aux_cmac_accum1
#define AR_AUX_CMAC_ACCUM1 0xB1

// User extension aux register - dsp_fp_cmp_max
#define AR_DSP_FP_CMP_MAX 0xBF

// User extension aux register - dsp_mac_lsbout
#define AR_DSP_MAC_LSBOUT 0x80000001

// User extension aux register - io_adc0_divseqstat
#define AR_IO_ADC0_DIVSEQSTAT 0x80015001

// User extension aux register - io_gpio_8b0_swporta_ddr
#define AR_IO_GPIO_8B0_SWPORTA_DDR 0x80017801

// User extension aux register - io_gpio_8b1_swporta_ddr
#define AR_IO_GPIO_8B1_SWPORTA_DDR 0x80017901

// User extension aux register - io_spi_mst0_ctrl
#define AR_IO_SPI_MST0_CTRL 0x80010000

// User extension aux register - io_spi_mst1_ctrl
#define AR_IO_SPI_MST1_CTRL 0x80010100

// User extension aux register - mul32x16_accum_h
#define AR_MUL32X16_ACCUM_H 0x111

// User extension aux register - aux_dpfp1h
#define AR_AUX_DPFP1H 0x302

// User extension aux register - aux_cmac_accum2
#define AR_AUX_CMAC_ACCUM2 0xB2

// User extension aux register - io_adc0_seq
#define AR_IO_ADC0_SEQ 0x80015002

// User extension aux register - io_i2c_mst0_data_cmd
#define AR_IO_I2C_MST0_DATA_CMD 0x80012001

// User extension aux register - io_i2c_mst1_data_cmd
#define AR_IO_I2C_MST1_DATA_CMD 0x80012101

// User extension aux register - mul32x16_ctrl
#define AR_MUL32X16_CTRL 0x112

// User extension aux register - aux_dpfp2l
#define AR_AUX_DPFP2L 0x303

// User extension aux register - aux_cmac_acc_shft
#define AR_AUX_CMAC_ACC_SHFT 0xB3

// User extension aux register - io_adc0_ctrl
#define AR_IO_ADC0_CTRL 0x80015003

// User extension aux register - io_gpio_8b0_inten
#define AR_IO_GPIO_8B0_INTEN 0x80017803

// User extension aux register - io_gpio_8b1_inten
#define AR_IO_GPIO_8B1_INTEN 0x80017903

// User extension aux register - aux_dpfp2h
#define AR_AUX_DPFP2H 0x304

// User extension aux register - aux_cmac_acc1
#define AR_AUX_CMAC_ACC1 0xB4

// User extension aux register - io_adc0_intstat
#define AR_IO_ADC0_INTSTAT 0x80015004

// User extension aux register - io_gpio_8b0_inttype_level
#define AR_IO_GPIO_8B0_INTTYPE_LEVEL 0x80017805

// User extension aux register - io_gpio_8b1_inttype_level
#define AR_IO_GPIO_8B1_INTTYPE_LEVEL 0x80017905

// User extension aux register - io_i2c_mst0_ss_scl_cnt
#define AR_IO_I2C_MST0_SS_SCL_CNT 0x80012002

// User extension aux register - io_i2c_mst1_ss_scl_cnt
#define AR_IO_I2C_MST1_SS_SCL_CNT 0x80012102

// User extension aux register - dpfp_status
#define AR_DPFP_STATUS 0x305

// User extension aux register - aux_cmac_acc2
#define AR_AUX_CMAC_ACC2 0xB5

// User extension aux register - io_adc0_sample
#define AR_IO_ADC0_SAMPLE 0x80015005

// User extension aux register - io_gpio_8b0_int_polarity
#define AR_IO_GPIO_8B0_INT_POLARITY 0x80017806

// User extension aux register - io_gpio_8b1_int_polarity
#define AR_IO_GPIO_8B1_INT_POLARITY 0x80017906

// User extension aux register - aux_cmac_status_mode
#define AR_AUX_CMAC_STATUS_MODE 0xB6

// User extension aux register - io_gpio_8b0_intstatus
#define AR_IO_GPIO_8B0_INTSTATUS 0x80017807

// User extension aux register - io_gpio_8b1_intstatus
#define AR_IO_GPIO_8B1_INTSTATUS 0x80017907

// User extension aux register - io_i2c_mst0_fs_scl_cnt
#define AR_IO_I2C_MST0_FS_SCL_CNT 0x80012004

// User extension aux register - io_i2c_mst1_fs_scl_cnt
#define AR_IO_I2C_MST1_FS_SCL_CNT 0x80012104

// User extension aux register - aux_cmac_src_shift
#define AR_AUX_CMAC_SRC_SHIFT 0xB7

// User extension aux register - io_gpio_8b0_debounce
#define AR_IO_GPIO_8B0_DEBOUNCE 0x80017808

// User extension aux register - io_gpio_8b1_debounce
#define AR_IO_GPIO_8B1_DEBOUNCE 0x80017908

// User extension aux register - io_i2c_mst0_intr_stat
#define AR_IO_I2C_MST0_INTR_STAT 0x80012006

// User extension aux register - io_i2c_mst1_intr_stat
#define AR_IO_I2C_MST1_INTR_STAT 0x80012106

// User extension aux register - io_gpio_8b0_porta_eoi
#define AR_IO_GPIO_8B0_PORTA_EOI 0x80017809

// User extension aux register - io_gpio_8b1_porta_eoi
#define AR_IO_GPIO_8B1_PORTA_EOI 0x80017909

// User extension aux register - io_i2c_mst0_intr_mask
#define AR_IO_I2C_MST0_INTR_MASK 0x80012007

// User extension aux register - io_i2c_mst1_intr_mask
#define AR_IO_I2C_MST1_INTR_MASK 0x80012107

// User extension aux register - io_gpio_8b0_ext_porta
#define AR_IO_GPIO_8B0_EXT_PORTA 0x8001780A

// User extension aux register - io_gpio_8b1_ext_porta
#define AR_IO_GPIO_8B1_EXT_PORTA 0x8001790a

// User extension aux register - io_i2c_mst0_tl
#define AR_IO_I2C_MST0_TL 0x80012008

// User extension aux register - io_i2c_mst1_tl
#define AR_IO_I2C_MST1_TL 0x80012108

// User extension aux register - io_gpio_8b0_ls_sync
#define AR_IO_GPIO_8B0_LS_SYNC 0x8001780B

// User extension aux register - io_gpio_8b1_ls_sync
#define AR_IO_GPIO_8B1_LS_SYNC 0x8001790b

// User extension aux register - io_gpio_8b0_intmask
#define AR_IO_GPIO_8B0_INTMASK 0x80017804

// User extension aux register - io_gpio_8b1_intmask
#define AR_IO_GPIO_8B1_INTMASK 0x80017904

// User extension aux register - io_i2c_mst0_intr_clr
#define AR_IO_I2C_MST0_INTR_CLR 0x8001200A

// User extension aux register - io_i2c_mst1_intr_clr
#define AR_IO_I2C_MST1_INTR_CLR 0x8001210a

// User extension aux register - io_spi_mst0_spien
#define AR_IO_SPI_MST0_SPIEN 0x80010002

// User extension aux register - io_spi_mst1_spien
#define AR_IO_SPI_MST1_SPIEN 0x80010102

// User extension aux register - io_i2c_mst0_status
#define AR_IO_I2C_MST0_STATUS 0x8001200B

// User extension aux register - io_i2c_mst1_status
#define AR_IO_I2C_MST1_STATUS 0x8001210b

// User extension aux register - io_i2c_mst0_txflr
#define AR_IO_I2C_MST0_TXFLR 0x8001200C

// User extension aux register - io_i2c_mst1_txflr
#define AR_IO_I2C_MST1_TXFLR 0x8001210c

// User extension aux register - io_i2c_mst0_rxflr
#define AR_IO_I2C_MST0_RXFLR 0x8001200D

// User extension aux register - io_i2c_mst1_rxflr
#define AR_IO_I2C_MST1_RXFLR 0x8001210d

// User extension aux register - io_i2c_mst0_sda_config
#define AR_IO_I2C_MST0_SDA_CONFIG 0x8001200E

// User extension aux register - io_i2c_mst1_sda_config
#define AR_IO_I2C_MST1_SDA_CONFIG 0x8001210e

// User extension aux register - io_i2c_mst0_tx_abrt_source
#define AR_IO_I2C_MST0_TX_ABRT_SOURCE 0x8001200F

// User extension aux register - io_i2c_mst1_tx_abrt_source
#define AR_IO_I2C_MST1_TX_ABRT_SOURCE 0x8001210f

// User extension aux register - io_spi_mst0_timing
#define AR_IO_SPI_MST0_TIMING 0x80010004

// User extension aux register - io_spi_mst1_timing
#define AR_IO_SPI_MST1_TIMING 0x80010104

// User extension aux register - io_i2c_mst0_enable_status
#define AR_IO_I2C_MST0_ENABLE_STATUS 0x80012011

// User extension aux register - io_i2c_mst1_enable_status
#define AR_IO_I2C_MST1_ENABLE_STATUS 0x80012111

// User extension aux register - io_spi_mst0_ftlr
#define AR_IO_SPI_MST0_FTLR 0x80010005

// User extension aux register - io_spi_mst1_ftlr
#define AR_IO_SPI_MST1_FTLR 0x80010105

// User extension aux register - io_spi_mst0_txflr
#define AR_IO_SPI_MST0_TXFLR 0x80010007

// User extension aux register - io_spi_mst1_txflr
#define AR_IO_SPI_MST1_TXFLR 0x80010107

// User extension aux register - io_spi_mst0_rxflr
#define AR_IO_SPI_MST0_RXFLR 0x80010008

// User extension aux register - io_spi_mst1_rxflr
#define AR_IO_SPI_MST1_RXFLR 0x80010108

// User extension aux register - io_spi_mst0_sr
#define AR_IO_SPI_MST0_SR 0x80010009

// User extension aux register - io_spi_mst1_sr
#define AR_IO_SPI_MST1_SR 0x80010109

// User extension aux register - io_spi_mst0_intr_stat
#define AR_IO_SPI_MST0_INTR_STAT 0x8001000A

// User extension aux register - io_spi_mst1_intr_stat
#define AR_IO_SPI_MST1_INTR_STAT 0x8001010a

// User extension aux register - io_spi_mst0_intr_mask
#define AR_IO_SPI_MST0_INTR_MASK 0x8001000B

// User extension aux register - io_spi_mst1_intr_mask
#define AR_IO_SPI_MST1_INTR_MASK 0x8001010b

// User extension aux register - io_spi_mst0_clr_intr
#define AR_IO_SPI_MST0_CLR_INTR 0x8001000C

// User extension aux register - io_spi_mst1_clr_intr
#define AR_IO_SPI_MST1_CLR_INTR 0x8001010c

// User extension aux register - io_spi_mst0_dr
#define AR_IO_SPI_MST0_DR 0x8001000D

// User extension aux register - io_spi_mst1_dr
#define AR_IO_SPI_MST1_DR 0x8001010d

#ifndef __GNUC__
// User extension condition code cmac_ps
#pragma condition(20, name=>"cmac_ps")

// User extension condition code cmac_psc
#pragma condition(21, name=>"cmac_psc")
#endif

#include "util/compiler.h"

#endif


